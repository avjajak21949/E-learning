@{
    ViewData["Title"] = "Schedule Calendar";
    Layout = "_Layout";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="h3 mb-0 text-gray-800">Schedule Calendar</h1>
        <div class="d-flex align-items-center">
            <button type="button" class="btn btn-sm btn-outline-primary mr-2" id="prevMonth">
                <i class="fas fa-chevron-left"></i>
            </button>
            <h5 class="mb-0 mx-2" id="currentMonth"></h5>
            <button type="button" class="btn btn-sm btn-outline-primary" id="nextMonth">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>

    <div class="card shadow">
        <div class="card-header py-2 d-flex justify-content-between align-items-center bg-primary">
            <h6 class="m-0 font-weight-bold text-white">Weekly View</h6>
            <div class="dropdown">
                <button class="btn btn-sm btn-link text-white dropdown-toggle" type="button" 
                        id="calendarActions" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-cog"></i>
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="calendarActions">
                    <a class="dropdown-item" href="#" id="printCalendar"><i class="fas fa-print mr-2"></i>Print</a>
                    <a class="dropdown-item" href="#" id="exportCalendar"><i class="fas fa-file-export mr-2"></i>Export</a>
                </div>
            </div>
        </div>
        <div class="card-body p-2">
            <div class="calendar-grid">
                <div class="calendar-header">
                    <div class="calendar-day-header">Sun</div>
                    <div class="calendar-day-header">Mon</div>
                    <div class="calendar-day-header">Tue</div>
                    <div class="calendar-day-header">Wed</div>
                    <div class="calendar-day-header">Thu</div>
                    <div class="calendar-day-header">Fri</div>
                    <div class="calendar-day-header">Sat</div>
                </div>
                <div class="calendar-grid-body" id="calendarBody"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let currentDate = new Date();
            let schedules = @Html.Raw(ViewBag.Schedules);
            
            function updateCalendar() {
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth();
                const today = new Date();
                
                // Update month display
                $('#currentMonth').text(new Date(year, month).toLocaleString('default', { month: 'long', year: 'numeric' }));
                
                // Clear previous calendar
                $('#calendarBody').empty();
                
                // Get first day of month and total days
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const totalDays = lastDay.getDate();
                
                // Calculate total weeks to display
                const daysInFirstWeek = 7 - firstDay.getDay();
                const remainingDays = totalDays - daysInFirstWeek;
                const totalWeeks = Math.ceil(remainingDays / 7) + 1;
                
                let calendarHtml = '';
                let date = 1;
                
                // Create calendar weeks
                for (let week = 0; week < totalWeeks; week++) {
                    calendarHtml += '<div class="calendar-week">';
                    
                    // Create calendar days for each week
                    for (let day = 0; day < 7; day++) {
                        const isCurrentMonth = (week === 0 && day >= firstDay.getDay()) || 
                                             (week > 0 && date <= totalDays);
                        
                        if (isCurrentMonth) {
                            const currentDateObj = new Date(year, month, date);
                            const currentDateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(date).padStart(2, '0')}`;
                            const dayOfWeek = currentDateObj.getDay();
                            const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                            const currentDayName = dayNames[dayOfWeek];
                            
                            // Find schedules for this day
                            const daySchedules = schedules.filter(s => {
                                const dayMatch = s.daysOfWeek.includes(currentDayName);
                                const startDate = new Date(s.start);
                                const endDate = s.end ? new Date(s.end) : startDate;
                                return dayMatch && currentDateObj >= startDate && currentDateObj <= endDate;
                            });
                            
                            const isToday = currentDateObj.toDateString() === today.toDateString();
                            const dayClass = `calendar-day ${isToday ? 'today' : ''} ${daySchedules.length > 0 ? 'has-events' : ''}`;
                            
                            let dayContent = `<div class="date-number ${isToday ? 'today-date' : ''}">${date}</div>`;
                            
                            if (daySchedules.length > 0) {
                                dayContent += '<div class="day-events">';
                                daySchedules.forEach(schedule => {
                                    dayContent += `
                                        <div class="calendar-event" 
                                             data-toggle="tooltip" 
                                             title="${schedule.courseName} (${schedule.startTime}-${schedule.endTime})">
                                            ${schedule.courseName.substring(0, 12)}${schedule.courseName.length > 12 ? '...' : ''}
                                        </div>`;
                                });
                                dayContent += '</div>';
                            }
                            
                            calendarHtml += `<div class="${dayClass}">${dayContent}</div>`;
                            date++;
                        } else {
                            // Empty day (from previous or next month)
                            calendarHtml += '<div class="calendar-day empty-day"></div>';
                        }
                    }
                    
                    calendarHtml += '</div>'; // Close week
                }
                
                $('#calendarBody').html(calendarHtml);
                $('[data-toggle="tooltip"]').tooltip();
            }
            
            // Initialize calendar
            updateCalendar();
            
            // Navigation handlers
            $('#prevMonth').click(() => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                updateCalendar();
            });
            
            $('#nextMonth').click(() => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                updateCalendar();
            });

            // Action buttons
            $('#printCalendar').click(() => window.print());
            $('#exportCalendar').click(() => alert('Export functionality would go here'));
        });
    </script>
    
    <style>
        .calendar-grid {
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        
        .calendar-header {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
            margin-bottom: 4px;
        }
        
        .calendar-day-header {
            text-align: center;
            font-weight: 600;
            font-size: 0.8rem;
            padding: 4px 2px;
            color: #4a5568;
            background-color: #f7fafc;
            border-radius: 3px;
        }
        
        .calendar-grid-body {
            display: flex;
            flex-direction: column;
            flex: 1;
            gap: 2px;
        }
        
        .calendar-week {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
            flex: 1;
        }
        
        .calendar-day {
            background-color: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            padding: 4px;
            min-height: 80px;
            display: flex;
            flex-direction: column;
            transition: all 0.2s;
        }
        
        .calendar-day:hover {
            background-color: #f8fafc;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .calendar-day.today {
            background-color: #ebf8ff;
            border-color: #90cdf4;
        }
        
        .calendar-day.empty-day {
            background-color: #f8fafc;
            opacity: 0.6;
        }
        
        .calendar-day.has-events {
            background-color: #f0fff4;
        }
        
        .date-number {
            text-align: right;
            font-size: 0.75rem;
            font-weight: 500;
            margin-bottom: 2px;
            color: #4a5568;
        }
        
        .date-number.today-date {
            color: #2b6cb0;
            font-weight: 700;
        }
        
        .day-events {
            flex: 1;
            overflow-y: auto;
            scrollbar-width: thin;
        }
        
        .calendar-event {
            font-size: 0.7rem;
            padding: 2px 4px;
            margin: 2px 0;
            background-color: #4299e1;
            color: white;
            border-radius: 3px;
            cursor: pointer;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            transition: all 0.2s;
        }
        
        .calendar-event:hover {
            background-color: #3182ce;
        }
        
        /* Custom scrollbar */
        .day-events::-webkit-scrollbar {
            width: 4px;
        }
        
        .day-events::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 2px;
        }
        
        .day-events::-webkit-scrollbar-thumb {
            background: #cbd5e0;
            border-radius: 2px;
        }
        
        .day-events::-webkit-scrollbar-thumb:hover {
            background: #a0aec0;
        }
        
        /* Compact card styling */
        .card-header.py-2 {
            padding-top: 0.5rem !important;
            padding-bottom: 0.5rem !important;
        }
        
        .card-body.p-2 {
            padding: 0.5rem !important;
        }
    </style>
}